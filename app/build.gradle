apply plugin: 'com.android.application'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-android'

android {
    compileSdkVersion 26
    defaultConfig {
        applicationId "m13.retrofittest"
        minSdkVersion 15
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            Properties properties = new Properties()
            def propFile = new File('secret.properties')
            if (propFile.canRead()) {
                properties.load(new FileInputStream(propFile))
                if (properties != null && properties.containsKey('CLIENT_ID')
                        && properties.containsKey('CLIENT_SECRET')) {
                    buildConfigField "String", "CLIENT_ID", "\"" + properties['CLIENT_ID']+"\""
                    buildConfigField "String", "CLIENT_SECRET", "\"" + properties['CLIENT_SECRET']+"\""
                } else {
                    println 'secret.properties found but entries are missing'
                    buildConfigField "String", "CLIENT_ID", "\"" + "\""
                    buildConfigField "String", "CLIENT_SECRET", "\"" + "\""

                }
            } else {
                println 'secret.properties not found'
                buildConfigField "String", "CLIENT_ID", "\"" + "\""
                buildConfigField "String", "CLIENT_SECRET", "\"" + "\""
            }
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            Properties properties = new Properties()
            def propFile = new File('D:/github-repos-test/secret.properties')
            if (propFile.canRead()) {
                properties.load(new FileInputStream(propFile))
                if (properties != null && properties.containsKey('CLIENT_ID')
                        && properties.containsKey('CLIENT_SECRET')) {
                    buildConfigField "String", "CLIENT_ID", "\"" + properties['CLIENT_ID']+"\""
                    buildConfigField "String", "CLIENT_SECRET", "\"" + properties['CLIENT_SECRET']+"\""
                } else {
                    println 'secret.properties found but entries are missing'
                    buildConfigField "String", "CLIENT_ID", "\"" + "\""
                    buildConfigField "String", "CLIENT_SECRET", "\"" + "\""
                }
            } else {
                println 'secret.properties not found'
                buildConfigField "String", "CLIENT_ID", "\"" + "\""
                buildConfigField "String", "CLIENT_SECRET", "\"" + "\""
            }
        }

}

    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:27.1.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation 'com.android.support:recyclerview-v7:27.1.1'
    //RecyclerView
    implementation 'com.google.code.gson:gson:2.8.2'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    //Конвертер JSON
    implementation 'com.github.jitpack:gradle-simple:1.0.5'
    implementation 'org.glassfish:javax.annotation:10.0-b28'
    implementation 'com.github.jitpack:gradle-simple:1.0.5'
    //implementation 'com.github.eclipse:egit-github:v5.0.0.201806131550-r'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.0'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.5.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.9.1'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    //implementation 'com.github.eclipse:egit-github:v5.2.0.201812061821-r'

    //source: https://developer.android.com/jetpack/androidx/releases/lifecycle#declaring_dependencies
    def lifecycle_version = "2.0.0"

    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    // alternatively - just ViewModel
    //implementation "androidx.lifecycle:lifecycle-viewmodel:$lifecycle_version" // For Kotlin use lifecycle-viewmodel-ktx
    // alternatively - just LiveData
    //implementation "androidx.lifecycle:lifecycle-livedata:$lifecycle_version"
    // alternatively - Lifecycles only (no ViewModel or LiveData). Some UI
    //     AndroidX libraries use this lightweight import for Lifecycle
    implementation "androidx.lifecycle:lifecycle-runtime:$lifecycle_version"


    //kapt "androidx.lifecycle:lifecycle-compiler:$lifecycle_version" // For Kotlin use kapt instead of annotationProcessor
    // alternately - if using Java8, use the following instead of lifecycle-compiler
    //implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"

    // optional - ReactiveStreams support for LiveData
    implementation "androidx.lifecycle:lifecycle-reactivestreams:$lifecycle_version" // For Kotlin use lifecycle-reactivestreams-ktx

    // optional - Test helpers for LiveData
    testImplementation "androidx.arch.core:core-testing:$lifecycle_version"

    //https://developer.android.com/jetpack/androidx/releases/lifecycle#lifecycle-viewmodel-savedstate-1.0.0-alpha02
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:1.0.0-alpha02"

    //http://square.github.io/retrofit/
    implementation 'com.squareup.retrofit2:retrofit:2.5.0'
    implementation 'androidx.fragment:fragment-ktx:1.0.0'

    implementation 'javax.inject:javax.inject:1@jar'

    //https://developer.android.com/jetpack/androidx/releases/room
    def room_version = "2.1.0"

    implementation "androidx.room:room-runtime:$room_version"
    //kapt "androidx.room:room-compiler:$room_version" // For Kotlin use kapt instead of annotationProcessor

    // optional - Kotlin Extensions and Coroutines support for Room
    implementation "androidx.room:room-ktx:$room_version"

    // optional - RxJava support for Room
    implementation "androidx.room:room-rxjava2:$room_version"

    // optional - Guava support for Room, including Optional and ListenableFuture
    implementation "androidx.room:room-guava:$room_version"

    // Test helpers
    testImplementation "androidx.room:room-testing:$room_version"
}
repositories {
    mavenCentral()
}
